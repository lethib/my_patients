//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
  pub created_at: DateTimeWithTimeZone,
  pub updated_at: DateTimeWithTimeZone,
  #[sea_orm(primary_key)]
  pub id: i32,
  pub pid: Uuid,
  #[sea_orm(unique)]
  pub email: String,
  pub password: String,
  pub phone_number: String,
  pub first_name: String,
  pub last_name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::patient_users::Entity")]
  PatientUsers,
  #[sea_orm(has_one = "super::user_business_informations::Entity")]
  UserBusinessInformations,
}

impl Related<super::patient_users::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::PatientUsers.def()
  }
}

impl Related<super::user_business_informations::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::UserBusinessInformations.def()
  }
}

impl Related<super::patients::Entity> for Entity {
  fn to() -> RelationDef {
    super::patient_users::Relation::Patients.def()
  }
  fn via() -> Option<RelationDef> {
    Some(super::patient_users::Relation::Users.def().rev())
  }
}
